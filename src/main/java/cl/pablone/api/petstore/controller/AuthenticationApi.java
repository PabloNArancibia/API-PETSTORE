/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package cl.pablone.api.petstore.controller;

import cl.pablone.api.petstore.viewmodel.LoginRequest;
import cl.pablone.api.petstore.viewmodel.LoginResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Authentication", description = "the Authentication API")
public interface AuthenticationApi {

    /**
     * POST /authentication/login : Authenticate an existing user
     *
     * @param body Data access to log (required)
     * @return User authenticated (status code 200)
     *         or cant authenticated user (status code 400)
     *         or your username or password are incorrect (status code 401)
     */
    @ApiOperation(value = "Authenticate an existing user", nickname = "logUser", notes = "", response = LoginResponse.class, tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User authenticated", response = LoginResponse.class),
        @ApiResponse(code = 400, message = "cant authenticated user", response = LoginResponse.class),
        @ApiResponse(code = 401, message = "your username or password are incorrect", response = LoginResponse.class) })
    @RequestMapping(value = "/authentication/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<LoginResponse> logUser(@ApiParam(value = "Data access to log" ,required=true )  @Valid @RequestBody LoginRequest body);


    /**
     * POST /authentication/logout : Logs out current logged in user session
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Logs out current logged in user session", nickname = "logoutUser", notes = "", tags={ "authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/authentication/logout",
        method = RequestMethod.POST)
    ResponseEntity<Void> logoutUser();

}
